---

# create all certificates locally
- name: create certificats folder
  become: no
  local_action: command mkdir -p {{ home_dir }}ssl
  
- name: create ca certificats
  become: no
  local_action: command ./../lib/init-ssl-ca {{ home_dir }}ssl 
  
- name: create api and controller certificats
  become: no
  local_action: command ./../lib/init-ssl {{ home_dir }}ssl apiserver controller IP.1={{ NODE_IP }},IP.2={{ CLUSTER_IP }}
    
- name: create admin and kube-admin certificats
  become: no
  local_action: command ./../lib/init-ssl {{ home_dir }}ssl admin kube-admin
   
 # now transfer certificates  
- name: Creates directory
  file: path=/etc/kubernetes/ssl state=directory
  
- unarchive: src=ssl/controller.tar dest=/etc/kubernetes/ssl

# set required environment
- name: set /etc/environment
  template: src=environment.j2 dest=/etc/environment
  
# and install kubernetes
- name: copy kubernetes installation script
  template: src=user-data.j2 dest=/tmp/user-data

- name: run install script
  become: yes
  command: coreos-cloudinit --from-file=/tmp/user-data
  
# now install and configure kubectl  
- name: install kubectl
  become: yes
  copy: src=kubectl dest=/opt/bin/kubectl mode=0755
  
- name: configure kubectl
  template: src=kubeconfig.j2 dest=/tmp/kubeconfig
  environment: 
    KUBECONFIG: :/tmp/kubeconfig
- command: kubectl config use-context single

# install helmc and our helm repository 
- name: install helmc
  copy: src=helmc dest=/opt/bin/helmc mode=0755
  
- name: install helm repository
  command: git clone https://github.com/spicter/helm.git
  args: 
    chdir: /opt
  
- name: update helm repositories
  command: helmc --home /opt/helm update 

# wait until api-server is up
- name: wait until api-server is up
  wait_for: port=8080 delay=10
    
- name: wait until kube-system services are up
  copy: src=wait_for_kubesystem_is_up.sh dest=/opt/wait_for_kubesystem_is_up.sh mode=0755
- command: sh /opt/wait_for_kubesystem_is_up.sh
  
- name: install our first service
  become: yes
  command: helmc --home /opt/helm install kube-dashboard
  ignore_errors: yes

# and setup the kubernetes proxy
# - name: start a kube proxy on port 80 in background
#   command: "kubectl proxy --address= {{ NODE_IP }} --port=80 &"
